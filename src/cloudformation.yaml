---
AWSTemplateFormatVersion: '2010-09-09'
Description: Visual Subnet Calculator
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Naming
        Parameters:
          - DomainName
      - Label:
          default: Other
        Parameters:
          - ExtraTXTRecord
    ParameterLabels:
      DomainName:
        default: Domain Name
Parameters:
  DomainName:
    Type: String
    Default: ''
    Description: Domain Name for Route53 Hosted Zone and Static S3 Site
  ExtraTXTRecord:
    Type: String
    Default: ''
    Description: Extra TXT record for the root domain, such as for validation of domain ownership. Will be enclosed in quotes automatically.
Resources:
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Visual Subnet Calculator Static Website Amazon CloudFront Identity
  StaticWebsite:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub
        - visualsubnetcalc-static-website-${Unique}
        - Unique: !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ]
      AccessControl: Private
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: s3-static-website/
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersionAfter7Days
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 7
  StaticWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub
        - visualsubnetcalc-static-website-${Unique}
        - Unique: !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ]
      PolicyDocument:
        Version: '2012-10-17'
        Id: WebAccess
        Statement:
          - Sid: CloudFrontReadForGetBucketObjects
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}'
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !Sub
              - arn:${AWS::Partition}:s3:::visualsubnetcalc-static-website-${Unique}/*
              - Unique: !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ]
          - Sid: DenyPlaintextAccess
            Principal: '*'
            Effect: Deny
            Action: s3:*
            Resource:
              - !Sub
                - arn:${AWS::Partition}:s3:::visualsubnetcalc-static-website-${Unique}
                - Unique: !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ]
              - !Sub
                - arn:${AWS::Partition}:s3:::visualsubnetcalc-static-website-${Unique}/*
                - Unique: !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ]
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  LoggingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub
        - visualsubnetcalc-logging-${Unique}
        - Unique: !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ]
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersionAfter7Days
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 7
  LoggingBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: LoggingBucket
    Properties:
      Bucket: !Sub
        - visualsubnetcalc-logging-${Unique}
        - Unique: !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ]
      PolicyDocument:
        Version: '2012-10-17'
        Id: WebAccess
        Statement:
          - Sid: S3ServerAccessLogsPolicy
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub
              - arn:${AWS::Partition}:s3:::visualsubnetcalc-logging-${Unique}/*
              - Unique: !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ]
            Condition:
              ArnEquals:
                aws:SourceArn:
                  - !Sub
                    - arn:${AWS::Partition}:s3:::visualsubnetcalc-static-website-${Unique}
                    - Unique: !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ]
              StringEquals:
                aws:SourceAccount: !Ref 'AWS::AccountId'
          - Sid: DenyPlaintextAccess
            Principal: '*'
            Effect: Deny
            Action: s3:*
            Resource:
              - !Sub
                - arn:${AWS::Partition}:s3:::visualsubnetcalc-logging-${Unique}
                - Unique: !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ]
              - !Sub
                - arn:${AWS::Partition}:s3:::visualsubnetcalc-logging-${Unique}/*
                - Unique: !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ]
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: !Sub 'VisualSubnetCalc'
      Name: !Ref 'DomainName'
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref 'DomainName'
      DomainValidationOptions:
        - DomainName: !Ref 'DomainName'
          HostedZoneId: !Ref 'HostedZone'
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Sub 'VisualSubnetCalc'
  CertificateWWW:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub 'www.${DomainName}'
      DomainValidationOptions:
        - DomainName: !Sub 'www.${DomainName}'
          HostedZoneId: !Ref 'HostedZone'
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Sub 'VisualSubnetCalc'
  CloudFrontAlias:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt 'CloudFront.DomainName'
        HostedZoneId: Z2FDTNDATAQYW2
      Comment: To CloudFront S3
      HostedZoneId: !Ref 'HostedZone'
      Name: !Sub '${DomainName}.'
      Type: A
  CloudFrontAliasWWW:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt 'CloudFrontWWW.DomainName'
        HostedZoneId: Z2FDTNDATAQYW2
      Comment: To CloudFront Redirect
      HostedZoneId: !Ref 'HostedZone'
      Name: !Sub 'www.${DomainName}.'
      Type: A
  SPFRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub '${DomainName}.'
      Type: TXT
      TTL: 300
      ResourceRecords:
        - !Sub '"${ExtraTXTRecord}"'
        - '"v=spf1 -all"'
  DMARCRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub '_dmarc.${DomainName}.'
      Type: TXT
      TTL: 300
      ResourceRecords:
        - '"v=DMARC1; p=reject;"'
  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Visual Subnet Calculator Static Website
        Aliases:
          - !Ref 'DomainName'
        Logging:
          Bucket: !GetAtt LoggingBucket.DomainName
          Prefix: cloudfront
          IncludeCookies: true
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: !Sub 'S3-Static-Website'
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          ResponseHeadersPolicyId: !Ref HstsResponseHeadersPolicy
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: "/404.html"
            ResponseCode: "404"
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponsePagePath: "/404.html"
            ResponseCode: "404"
            ErrorCachingMinTTL: 300
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !Sub
              - visualsubnetcalc-static-website-${Unique}.s3.${AWS::Region}.amazonaws.com
              - Unique: !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ]
            Id: !Sub 'S3-Static-Website'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${OriginAccessIdentity}'
        PriceClass: PriceClass_100
        IPV6Enabled: false
        ViewerCertificate:
          AcmCertificateArn: !Ref 'Certificate'
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
  CloudFrontWWW:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Visual Subnet Calculator WWW Redirect
        Aliases:
          - !Sub 'www.${DomainName}'
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: !Sub 'S3-Static-Website'
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt RedirectWWWFunction.FunctionARN
          ResponseHeadersPolicyId: !Ref HstsResponseHeadersPolicy
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !Sub
              - visualsubnetcalc-static-website-${Unique}.s3.${AWS::Region}.amazonaws.com
              - Unique: !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ]
            Id: !Sub 'S3-Static-Website'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${OriginAccessIdentity}'
        PriceClass: PriceClass_100
        IPV6Enabled: false
        ViewerCertificate:
          AcmCertificateArn: !Ref 'CertificateWWW'
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
  RedirectWWWFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: redirect-www-to-non-www
      AutoPublish: true
      FunctionConfig:
        Comment: "Redirects domains starting with www. to non-www."
        Runtime: cloudfront-js-2.0
      FunctionCode: |
        function handler(event) {
          var request = event.request;
          var headers = request.headers;
          
          // Retrieve the Host header value.
          var hostHeader = headers.host ? headers.host.value : "";
          
          // Check if the host starts with "www."
          if (hostHeader.startsWith("www.")) {
            // Remove the "www." prefix
            var newHost = hostHeader.slice(4);
            
            // Construct the new URL preserving the URI and query string (if any)
            var redirectUrl = "https://" + newHost + request.uri;
            if (request.querystring && request.querystring.length > 0) {
              redirectUrl += "?" + request.querystring;
            }
            
            // Return a 301 redirect response
            return {
              statusCode: 301,
              statusDescription: 'Moved Permanently',
              headers: {
                "location": { "value": redirectUrl },
                "cache-control": { "value": "no-cache" }
              }
            };
          }
          
          // If no redirection is required, continue processing the request as normal.
          return request;
        }
  HstsResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: HSTS-Policy
        Comment: "Adds HSTS header (Strict-Transport-Security)"
        SecurityHeadersConfig:
          StrictTransportSecurity:
            Override: true
            AccessControlMaxAgeSec: 31536000
            IncludeSubdomains: true
            Preload: true
          ContentTypeOptions:
            Override: false
          FrameOptions:
            Override: false
            FrameOption: DENY
          ReferrerPolicy:
            Override: false
            ReferrerPolicy: no-referrer
          XSSProtection:
            Override: false
            Protection: true
        CustomHeadersConfig:
          Items: []
